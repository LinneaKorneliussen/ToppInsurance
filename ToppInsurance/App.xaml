<Application x:Class="ToppInsurance.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:material="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls" 
             xmlns:local="clr-namespace:TopInsuranceWPF.ViewModels"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <!-- MahApps Metro Resources -->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- Custom Style menu -->
            <Style x:Key="menuButton" TargetType="Button">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Height" Value="35" />
                <Setter Property="Margin" Value="15 3" />
                <Setter Property="FontSize" Value="13" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="7">
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#5CD67B" />
                        <Setter Property="Foreground" Value="#ffffff" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Menu button Style -->
            <Style x:Key="menuButtonIcon" TargetType="material:PackIconMaterial">
                <Setter Property="Margin" Value="0 2 10 0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Width" Value="15" />
                <Setter Property="Height" Value="15" />
            </Style>

            <!-- Custom Menu Expander Style -->
            <Style x:Key="menuExpander" TargetType="Expander">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Expander">
                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="5">
                                <StackPanel>
                                    <ToggleButton x:Name="HeaderSite" 
                                                  Content="{TemplateBinding Header}"
                                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Background="Transparent"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  FontWeight="{TemplateBinding FontWeight}"
                                                  BorderBrush="Transparent"
                                                  BorderThickness="0"
                                                  Padding="5"
                                                  HorizontalContentAlignment="Left">
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border Background="{TemplateBinding Background}">
                                                    <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5"/>
                                                </Border>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                    <ContentPresenter x:Name="ExpandSite"
                                                      Visibility="Collapsed"
                                                      ContentSource="Content"
                                                      HorizontalAlignment="Left"
                                                      Margin="20 0"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="HeaderSite" Property="Foreground" Value="#5CD67B"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Custom Icon Style for Expander Buttons -->
            <Style x:Key="expanderIcon" TargetType="material:PackIconMaterial">
                <Setter Property="Margin" Value="0 2 10 0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Width" Value="12" />
                <Setter Property="Height" Value="12" />
            </Style>


            <!--Style for Searchbox-->
            <Style x:Key="searchTextbox" TargetType="TextBox">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="Padding" Value="15,10,15,10" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="0,10,0,10" />
                <Setter Property="FontWeight" Value="Normal" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Grid>
                                <Border x:Name="border" CornerRadius="20" Background="{TemplateBinding Background}" BorderBrush="#223A2A" BorderThickness="1">
                                    <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                                </Border>
                                <TextBlock x:Name="WatermarkText" 
                               Text="{TemplateBinding Tag}" 
                               Foreground="Gray" 
                               FontSize="12" 
                               Margin="20,0,0,0" 
                               VerticalAlignment="Center"
                               Visibility="{Binding Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TabItem Style -->
            <Style x:Key="TabItemStyle" TargetType="TabItem">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Padding" Value="15,10"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Grid>
                                <Border x:Name="TabItemBorder"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0,0,0,3" 
                                BorderBrush="Transparent"
                                Padding="{TemplateBinding Padding}">
                                    <ContentPresenter ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="TabItemBorder" Property="BorderBrush" Value="#223A2A"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Validation Error -->
            <ControlTemplate x:Key="ValidationErrorTemplate" TargetType="Control">
                <DockPanel LastChildFill="True">
                    <material:PackIconMaterial Width="16" Height="16" Kind="AlertCircle" Foreground="DarkSalmon" DockPanel.Dock="Right" Margin="5,0,0,0"
                                   ToolTip="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource AncestorType=Control}}"/>
                    <AdornedElementPlaceholder x:Name="controlWithError" />
                </DockPanel>
            </ControlTemplate>


            <!-- Validation Error textbox style -->
            <Style TargetType="TextBox" x:Key="ValidationTextBoxStyle">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Margin" Value="0,0,5,0"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="ToolTip" Value="{x:Null}"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="BorderBrush" Value="DarkSalmon"/>
                        <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Validation Error datepicker style -->
            <Style TargetType="DatePicker" x:Key="ValidationDatePickerStyle">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Margin" Value="0,0,5,0"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="ToolTip" Value="{x:Null}"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="BorderBrush" Value="DarkSalmon"/>
                        <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Radiobutton styles-->
            <Style x:Key="RadioButtonStyle" TargetType="RadioButton">
                <Setter Property="Background" Value="Transparent"/>
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Background" Value="#223A2A"/>
                        <Setter Property="Foreground" Value="#223A2A"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--DataGrid Row style-->
            <Style x:Key="DataGridRowStyle" TargetType="DataGridRow">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Black"/>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#5CD67B"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Changes the color for combobox-->
            <Style TargetType="ComboBoxItem" x:Key="CustomComboBoxItemStyle">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Cursor" Value="Hand" />
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#5CD67B" />
                        <Setter Property="Foreground" Value="White" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

            <!-- Style for statistics -->
            <Style x:Key="StatisticsTabItemStyle" TargetType="TabItem">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="#2F4F4F" />
                <Setter Property="Padding" Value="5,3" />
                <Setter Property="Margin" Value="0,0,2,0" />
                <Setter Property="BorderBrush" Value="#CCCCCC" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="5" 
                                Margin="0,0,5,0" 
                                Padding="2">
                                <ContentPresenter x:Name="ContentSite" 
                                              ContentSource="Header" 
                                              Margin="0" 
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#223A2A" />
                        <Setter Property="Foreground" Value="White" />
                        <Setter Property="BorderBrush" Value="#223A2A" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="StatisticsTabControlStyle" TargetType="TabControl">
                <Setter Property="Background" Value="White" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Margin" Value="15" />
            </Style>

            <Style x:Key="StatisticsListViewItemStyle" TargetType="ListViewItem">
                <Setter Property="Foreground" Value="Black"/>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Foreground" Value="Green"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
